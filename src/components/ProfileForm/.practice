<TableBody>
            {info ? (info.map((item) => (
              <TableRow
                key={item.id}
                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
              >
                <TableCell component="th" scope="row">
                  {user.username}
                </TableCell>
                <TableCell align="right">{item.gender}</TableCell>
                <TableCell align="right">{item.weight} lbs </TableCell>
                <TableCell align="right">{item.height} inches</TableCell>
                <TableCell align="right">{item.age} </TableCell>

                {/* <TableCell align="right">{item.user_id} inches</TableCell> */}

                {/* <TableCell align="right">
                  <button onClick={() => {
                    console.log('item.id:', item.id);
                    dispatch({ type: 'DELETE_ITEM', payload: item.id })
                  }}>Delete Me</button>

                </TableCell> */}

                {idToEdit === item.id ? <div>


                  <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>
                    <div>


                      <FormControl sx={{ m: 1, width: '25ch' }} variant="outlined">
                        <OutlinedInput
                          id="3"
                          type='number'
                          endAdornment={<InputAdornment position="end">Pounds</InputAdornment>}
                          aria-describedby="outlined-weight-helper-text"
                          inputProps={{
                            'aria-label': 'weight',
                          }}
                          placeholder="165"
                          onChange={(event) => setWeight(event.target.value)}
                          value={weight}
                        />
                        <FormHelperText id="outlined-weight-helper-text">Weight</FormHelperText>
                      </FormControl>

                      <FormControl sx={{ m: 1, width: '25ch' }} variant="outlined">
                        <OutlinedInput
                          id="3"
                          type='number'
                          endAdornment={<InputAdornment position="end">Inches</InputAdornment>}
                          aria-describedby="outlined-weight-helper-text"
                          inputProps={{
                            'aria-label': 'weight',
                          }}
                          placeholder="165"
                          onChange={(event) => setHeight(event.target.value)}
                          value={height}
                        />
                        <FormHelperText id="outlined-weight-helper-text">Height</FormHelperText>
                      </FormControl>

                      <FormControl sx={{ m: 1, width: '25ch' }} variant="outlined">
                        <OutlinedInput
                          id="3"
                          type='number'
                          endAdornment={<InputAdornment position="end"></InputAdornment>}
                          aria-describedby="outlined-weight-helper-text"
                          inputProps={{
                            'aria-label': 'weight',
                          }}
                          placeholder="31"
                          onChange={(event) => setAge(event.target.value)}
                          value={age}
                        />
                        <FormHelperText id="outlined-weight-helper-text">Age</FormHelperText>
                      </FormControl>

                      <FormControl>
                        <FormLabel id="demo-radio-buttons-group-label">Gender</FormLabel>
                        <RadioGroup
                          aria-labelledby="demo-radio-buttons-group-label"
                          defaultValue="female"
                          name="radio-buttons-group"
                        >
                          <FormControlLabel value="1" onChange={handleGender} control={<Radio />} label="Male" />
                          <FormControlLabel value="2" onChange={handleGender} control={<Radio />} label="Female" />
                          <FormControlLabel value="3" onChange={handleGender} control={<Radio />} label="Non-Binary" />

                        </RadioGroup>
                      </FormControl>

                    </div>

                  </Box>



                  {/* <input value={weight} onChange={(event) => setWeight(event.target.value)}></input> */}
                  {/* <input value={height} onChange={(event) => setHeight(event.target.value)}></input> */}
                  {/* <input value={age} onChange={(event) => setAge(event.target.value)}></input> */}
                  {/* <input value={gender} onChange={(event) => setGender(event.target.value)}></input> */}


                  <button onClick={() => updateItem(item.id)}>Save changes</button>
                </div> : <button onClick={() => addInputField(item)}>Edit</button>}

              </TableRow>
            ))) : ('loading')
            }
          </TableBody>